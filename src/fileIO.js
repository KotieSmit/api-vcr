// Generated by CoffeeScript 1.8.0

/*
  Stateless utility methods for accessing api-vcr files.
  Any CRUD that is file system specific should go here
 */

(function() {
  var config, convertReqToFilename, count, fs, getSiblingName, path, queryStringIndicator, readFiles, stringifyParams, _,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  config = require('./config');

  path = require('path');

  _ = require('lodash');

  queryStringIndicator = '__&__';

  readFiles = function(filePath, jsonFiles) {
    var contents, file, fullPath, _i, _len;
    filePath = filePath || config.filePath;
    jsonFiles = jsonFiles || [];
    if (config.ignore.indexOf(path.basename(filePath)) !== -1) {
      return;
    }
    try {
      contents = fs.readdirSync(filePath);
    } catch (_error) {
      console.log("`" + filePath + "` is not a folder, skipping");
      return;
    }
    for (_i = 0, _len = contents.length; _i < _len; _i++) {
      file = contents[_i];
      fullPath = "" + filePath + "/" + file;
      if (file.indexOf('.json') >= 0) {
        jsonFiles.push(fullPath);
      } else {
        readFiles(fullPath, jsonFiles);
      }
    }
    return jsonFiles;
  };

  getSiblingName = function(filename) {
    var dirContents;
    dirContents = readFiles(path.dirname(filename));
    if (dirContents) {
      return dirContents[0];
    } else {
      return void 0;
    }
  };

  count = function() {
    count = readFiles().length;
    if (count === 0) {
      console.log("No JSON files found in `" + config.filePath + "`");
      if (config.isRecording) {
        console.log("Good thing you're recording");
      } else {
        console.log("You should probably add some or run in `--record` mode first");
      }
    } else if (count === 1) {
      console.log("Only found one file. What is this, don't trust me yet?");
    } else {
      console.log("Found " + count + " JSON files. You're ready to jam.");
    }
    return count;
  };

  stringifyParams = function(params) {
    var prop, sorted, strings;
    if (!params) {
      return '';
    }
    strings = [];
    for (prop in params) {
      if (!__hasProp.call(params, prop)) continue;
      strings.push("" + prop + "=" + params[prop]);
    }
    if (strings.length === 0) {
      return '';
    }
    sorted = _.sortBy(strings, function(s) {
      return s.charCodeAt(0);
    });
    return queryStringIndicator + sorted.join('&');
  };

  convertReqToFilename = function(req) {
    var file;
    file = config.filePath + req.path;
    file += stringifyParams(req.query);
    return file += '.json';
  };

  module.exports = {
    count: count,
    getSiblingName: getSiblingName,
    list: readFiles,
    convertReqToFilename: convertReqToFilename
  };

}).call(this);
