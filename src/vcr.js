// Generated by CoffeeScript 1.8.0
(function() {
  var app, config, dataStore, decorateProxiedRequest, express, fileScanner, http, interceptProxiedResponse, onError, onListening, proxy, record, server, start, startServer;

  express = require('express');

  http = require('http');

  config = require('./config');

  dataStore = require('./dataStore');

  fileScanner = require('./fileScanner');

  proxy = require('express-http-proxy');

  app = express();

  server = void 0;

  onError = function(err) {
    if (err.code === 'EADDRINUSE') {
      return console.log(config.port + " is in use. Can't start the server. Change the port with the `--port=1234` option");
    } else if (err.syscall !== 'listen') {
      throw err;
    }
  };

  onListening = function() {
    var addr, bind;
    addr = server.address();
    bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log("(つ -‘ _ ‘- )つ    Listening on " + bind + "     ");
    return console.log('');
  };

  startServer = function() {
    server = http.createServer(app);
    server.listen(config.port);
    server.on('error', onError);
    return server.on('listening', onListening);
  };

  decorateProxiedRequest = function(req) {
    req.headers['Accept-Encoding'] = 'utf8';
    delete req.headers['if-modified-since'];
    delete req.headers['if-none-match'];
    return req;
  };

  interceptProxiedResponse = function(data, req, res, callback) {
    data = data.toString('utf8');
    try {
      data = JSON.parse(data);
      dataStore.save(req, data);
      return callback(null, JSON.stringify(data));
    } catch (_error) {
      console.warn("unable to parse JSON response from API server", {
        req_path: req.path,
        data: data
      });
      return callback(null, data);
    }
  };

  record = function() {
    var safeHref;
    if (config.api.href[config.api.href.length - 1] === '/') {
      safeHref = config.api.href.substr(0, config.api.href.length - 1);
    }
    console.log('');
    console.log("Recording " + safeHref + "     ᕙ༼ ,,ԾܫԾ,, ༽ᕗ ");
    console.log('');
    return app.use(proxy(safeHref, {
      decorateRequest: decorateProxiedRequest,
      intercept: interceptProxiedResponse
    }));
  };

  start = function() {
    app.use(dataStore.fetchDataForRequest);
    return startServer();
  };

  module.exports = {
    record: record,
    start: start
  };

}).call(this);
