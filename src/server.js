// Generated by CoffeeScript 1.8.0
(function() {
  var apiRecorder, app, config, dataStore, express, fileScanner, http, onError, onListening, proxy, record, server, start, startServer, url;

  express = require('express');

  http = require('http');

  config = require('./config');

  dataStore = require('./dataStore');

  apiRecorder = require('./apiRecorder');

  fileScanner = require('./fileScanner');

  proxy = require('express-http-proxy');

  url = require('url');

  app = express();

  server = void 0;

  onError = function(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
  };

  onListening = function() {
    var addr, bind;
    addr = server.address();
    bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log("(つ -‘ _ ‘- )つ    Listening on " + bind + "   ");
    return console.log('');
  };

  startServer = function() {
    server = http.createServer(app);
    server.listen(config.port);
    server.on('error', onError);
    return server.on('listening', onListening);
  };

  record = function(api) {
    console.log('');
    console.log("Recording " + api + "     ᕙ༼ ,,ԾܫԾ,, ༽ᕗ ");
    console.log('');
    return app.use(proxy(api, {
      decorateRequest: function(req) {
        req.headers['Accept-Encoding'] = 'utf8';
        delete req.headers['if-modified-since'];
        delete req.headers['if-none-match'];
        return req;
      },
      intercept: function(data, req, res, callback) {
        data = data.toString('utf8');
        try {
          data = JSON.parse(data);
          dataStore.save(req, data);
          return callback(null, JSON.stringify(data));
        } catch (_error) {
          console.warn("unable to parse JSON response from API server", {
            req_path: req.path,
            data: data
          });
          return callback(42, data);
        }
      }
    }));
  };

  start = function() {
    app.use(dataStore.fetchDataForRequest);
    return startServer();
  };

  module.exports = {
    record: record,
    start: start
  };

}).call(this);
