// Generated by CoffeeScript 1.8.0
(function() {
  var METHODS, config, fileIO, fs, get, path, save;

  fs = require('fs-extra');

  config = require('./config');

  fileIO = require('./fileIO');

  path = require('path');

  get = function(req, res, next) {
    var file, fileCallback;
    file = fileIO.convertReqToFilename(req);
    fileCallback = function(err, data) {
      var sibling;
      if ((err != null ? err.code : void 0) === 'ENOENT' && config.sameSameSiblings) {
        console.log("  Didn't find `" + file + "`. Looking for similar siblings...");
        sibling = fileIO.getSiblingName(file);
        if (sibling) {
          console.log("  Found a sibling. Returning `" + (path.basename(sibling)) + "`");
          return fs.readJson(sibling, fileCallback);
        } else {
          return next();
        }
      } else if ((err != null ? err.code : void 0) === 'ENOENT') {
        console.log("  File not found: " + file);
        return next();
      } else if (err) {
        console.log("  Unhandled error", {
          err: err,
          data: data
        });
        return next();
      } else {
        res.send(data);
        return next();
      }
    };
    return fs.readJson(file, fileCallback);
  };

  save = function(req, data) {
    var filename;
    filename = fileIO.convertReqToFilename(req);
    return fs.outputJson(filename, data, function(err) {
      if (err) {
        return console.log("Couldn't write file `" + filename + "`", err);
      } else {
        return console.log("Wrote file: `" + filename + "`");
      }
    });
  };

  METHODS = {
    GET: get,
    POST: function(req, res, next) {
      next();
      return console.warn("staticData.POST not yet supported", arguments);
    },
    PUT: function(req, res, next) {
      next();
      return console.warn("staticData.PUT not yet supported", arguments);
    },
    DELETE: function(req, res, next) {
      next();
      return console.warn("staticData.DELETE not yet supported", arguments);
    }
  };

  module.exports = {
    save: save,
    fetchDataForRequest: function(req) {
      console.log("" + req.method + " localhost:" + config.port + " " + req.path);
      return METHODS[req.method].apply(this, arguments);
    }
  };

}).call(this);
